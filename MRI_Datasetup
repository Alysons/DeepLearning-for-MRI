#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb  7 10:47:18 2017

@author: sarina karmacharya
"""
import dicom, lmdb, re, sys
import os, fnmatch, shutil, subprocess
from IPython.utils import io
import numpy as np
import tensorflow as tf
np.random.seed(1234)
import matplotlib.pyplot as plt
from dipy.data import get_data
import nibabel as nib
from io import StringIO
import h5py

    
# we ignore a RuntimeWarning produced from dividing by zero


tf.app.flags.DEFINE_string('directory', '/data/pnl/home/sk834/deep_learning',
                           'Directory to write the tf files ' )

FLAGS = tf.app.flags.FLAGS

diffusion_ROOT_PATH = "/data/pnl/home/sk834/tensorflow_experiments/Second_trail/Deep_MRI_brain_extraction-master"

TRAIN_CONTOUR_PATH = os.path.join(diffusion_ROOT_PATH,
                            "labels")
                            
TRAIN_IMG_PATH = os.path.join(diffusion_ROOT_PATH,
                        "data")

text_file=open("/data/pnl/home/sk834/tensorflow_experiments/Second_trail/Deep_MRI_brain_extraction-master/caselist_match.txt",'r+')
for line in text_file:
    print(line,end='')
text_file.close()


caselist=open("/data/pnl/home/sk834/tensorflow_experiments/Second_trail/Deep_MRI_brain_extraction-master/caselist_match.txt",'r+')
FileName=open("/data/pnl/home/sk834/tensorflow_experiments/Second_trail/Deep_MRI_brain_extraction-master/caselist_match.txt").read().split('\n')
num=len(FileName)
for line in caselist:
    l=caselist.readline().rstrip()
    image_name=('%s_data.nii.gz') %l
    IMG_NAME_PATH=os.path.join(TRAIN_IMG_PATH,image_name)
    print(IMG_NAME_PATH)
    contour_name=('%s_label.nii.gz') %l
    CONTOUR_NAME_PATH=os.path.join(TRAIN_CONTOUR_PATH,contour_name)
    print(CONTOUR_NAME_PATH)
caselist.close()

def load_nifti(CONTOUR_NAME_PATH,IMG_NAME_PATH):  
        caselist=open("/data/pnl/home/sk834/tensorflow_experiments/Second_trail/Deep_MRI_brain_extraction-master/caselist_match.txt",'r+')
        for line in caselist:
            l=caselist.readline().rstrip()
            image_name=('%s_data.nii.gz') %l
            IMG_NAME_PATH=os.path.join(TRAIN_IMG_PATH,image_name)
            print(IMG_NAME_PATH)
            nifti_obj = nib.load(IMG_NAME_PATH)
            nifti_data = nifti_obj.get_data()#.astype(dtype)
            
            contour_name=('%s_label.nii.gz') %l
            CONTOUR_NAME_PATH=os.path.join(TRAIN_CONTOUR_PATH,contour_name)
            print(CONTOUR_NAME_PATH)
            label_obj=nib.load(CONTOUR_NAME_PATH)
            label_data=label_obj.get_data()
        return nifti_data, label_data
        


        
def _int64_feature(value):
    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))
    
def _bytes_feature(value):
    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))
        
def export_all_contours(contours, img_path, img_name):
    counter_img=0
    counter_label=0
    batchsz=100
    print("processing {:d} images and labels ...".format(len(FileName))) 
    filename=os.path.join(FLAGS.directory, img_name + '.tfrecords')
    print('writing', filename)
    writer=tf.python_io.TFRecordWriter(filename)
    for i in range(int(np.ceil(len(FileName) / float(batchsz)))):
        batch =FileName[(batchsz*i):batchsz*(i+1)]
        if len(batch) == 0:
            break
        imgs, labels = [], []
    for idx, ctr in enumerate(batch):
        try:
            img, label =load_nifti(TRAIN_CONTOUR_PATH,TRAIN_IMG_PATH)
            imgs.append(img)
            labels.append(label)
            rows =img.shape[0]
            cols =img.shape[1]
            depth=img.shape[2]
            
            img_raw=img.tostring()
            label_raw=label.tostring()
            
            example=tf.train.Example(features.tf.train.Features(
                                                               feature={
                                                                        'height':_int64_feature(rows),
                                                                        'width': _int64_feature(cols),
                                                                        'depth': _int64_feature(depth),
                                                                        'img_raw': _bytes_feature(img_raw),
                                                                        'label_raw': _bytes_feature(label_raw)}))
            writer.write(example.SerializeToString())
        except I0Error:
            continue
        writer.close()
        
  
        
    print("\nBuilding .tfrecord for train...")
    export_all_contours(TRAIN_CONTOUR_PATH, TRAIN_IMG_PATH, "train_images")
    get_all_contours(TRAIN_CONTOUR_PATH)
    print("\nBuilding .tfrecord for val...")
    export_all_contours(val_ctrs, TRAIN_IMG_PATH, "val_images")    
            
            
